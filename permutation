class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
          vector<vector<int>> result;
        vector<int> current;
        vector<bool> used(nums.size(), false); // To track which elements are used
        backtrack(nums, current, used, result);
        return result;
    }
    
private:
    void backtrack(vector<int>& nums, vector<int>& current, vector<bool>& used, vector<vector<int>>& result) {
        // Base case: if the current permutation is complete
        if (current.size() == nums.size()) {
            result.push_back(current);
            return;
        }
        
        // Recursive case: explore all possibilities
        for (int i = 0; i < nums.size(); ++i) {
            if (used[i]) continue; // Skip if already used
            
            // Choose the current number
            current.push_back(nums[i]);
            used[i] = true;
            
            // Recurse
            backtrack(nums, current, used, result);
            
            // Backtrack
            current.pop_back();
            used[i] = false;
        }
    }
};
